version: 2.1

experimental:
  notify:
    branches:
      only:
        - master

# Define shareable packages of configuration
# elements used into the worflow (= Orbs)
orbs:
  k3d:
    # Setting up VM executor to run k3d.
    executors:
      vm:
        machine:
          image: ubuntu-1604:201903-01
        resource_class: large
    jobs:
      e2e-orb:
        # PARAMETERS
        parameters:
          test_name:
            description: name of the test in e2e code
            type: string
            default: e2e code name
          test_type:
            description: type of test (e2e or kuttl)
            type: string
            default: e2e
          operatorDir:
            type: string
            description: relative path where the build must be run
            default: casskop
        executor: vm
        working_directory: /home/circleci/<< parameters.operatorDir >>
        environment:
          K3S_IMAGE: rancher/k3s:v1.18.4-k3s1
          K8S_VERSION: v1.18.4
          GOPATH: /go
          GO111MODULE: on
          DOCKER_LATEST: 1
          GIN_MODE: release
        steps:
          - run:
              name: Set up K3d
              command: |
                wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
                k3d cluster create --image ${K3S_IMAGE} --wait
                mkdir -p ${HOME}/.kube
          - checkout:
              path: /home/circleci/casskop
          - run:
              name: Create file with build image version
              command: |
                make build-image > casskop-build-image-tar
          - restore_cache:
              keys:
                - '{{ checksum "casskop-build-image-tar" }}'
          - run:
              name: Load Casskop build image into k3d
              command: |
                if [ ! -f "casskop-build-image.tar" ]
                then
                  docker pull $(cat casskop-build-image-tar)
                  docker save $(cat casskop-build-image-tar) > casskop-build-image.tar
                fi
                k3d image import casskop-build-image.tar
          - save_cache:
              name: Save Casskop build image
              key: '{{ checksum "casskop-build-image-tar" }}'
              paths:
                - casskop-build-image.tar
          - run:
              name: Setup kubectl
              command: |
                set -x
                sudo chmod o+w /usr/local/bin/
                wget -P /usr/local/bin/ https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl
                chmod +x /usr/local/bin/kubectl
          - run:
              name: Setup helm
              command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          - run:
                name: Setup kuttl
                command: |
                  set -x
                  sudo chmod o+w /usr/local/bin/
                  curl -L https://github.com/kudobuilder/kuttl/releases/download/v0.7.2/kubectl-kuttl_0.7.2_linux_x86_64 -o /usr/local/bin/kuttl
                  chmod +x /usr/local/bin/kuttl
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          # Acceptance test
          - run: # Run acceptance test through 'docker-e2e-test-fix-arg' makefile step
              name: Operator acceptance test
              no_output_timeout: 1200
              command: |
                if [ << parameters.test_type >> = "e2e" ]
                then
                  kubectl create namespace cassandra-e2e
                  ./tools/circleci-get-logs.sh&
                  make docker-e2e-test-fix-arg << parameters.test_name >> || {
                    kubectl get events --all-namespaces --sort-by .metadata.creationTimestamp ;
                    echo "Show Operator logs:"
                    cat operator.log
                    false;
                  }
                fi
                if [ << parameters.test_type >> = "kuttl" ]
                then
                  make kuttl-test-fix-arg << parameters.test_name >> || {
                    kubectl get events --all-namespaces --sort-by .metadata.creationTimestamp ;
                    false;
                  }
                fi
  operator:
    # Parameters anchor
    .params_operator: &params_operator
      parameters:
        operatorDir:
          type: string
          description: relative path where the build must be run
          default: casskop
        operatorName:
          type: string
          description: operator's name
          default: CassKop
      working_directory: /home/circleci/<< parameters.operatorDir >>
      executor: operator-build
    # Job anchor
    .job_operator: &job_operator
      working_directory: /home/circleci/<< parameters.operatorDir >>
      executor: operator-build
    # Setting up docker executor using casskop-build image.
    executors:
      operator-build:
        docker:
          - image: orangeopensource/casskop-build:v0.18.0-forked-pr317
    # Define jobs list
    jobs:
      # Build job, which build operator docker image (with operator-sdk build)
      generate:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/casskop
          - setup_remote_docker # Creates a separate environment for each build for security.
          - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
              keys: # Use checksum of go.sum to version cache.
                - << parameters.operatorName >>-generate-{{ .Branch }}-{{ checksum "go.sum" }}
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          # Build steps
          - run:
              name: Download dependencies
              command: if [ ! -d vendor ]; then go mod download; fi
          - run:
              name: Vendor dependencies
              command: if [ ! -d vendor ]; then go mod vendor; fi
          - run:
              name: Generate k8s
              command: |
                make generate
                [ "$(git ls-files -m |grep -c zz_generated)" -eq 0 ]
          - persist_to_workspace: # Create artifacts
              root: /home/circleci
              paths:
                - << parameters.operatorDir >>/build/_output
                - << parameters.operatorDir >>/vendor
          - save_cache:
              name: Save build artifacts in cache
              key: << parameters.operatorName >>-generate-{{ .Branch }}-{{ checksum "go.sum" }}
              paths:
                - build/_output
                - vendor

      # Build job, which build operator docker image (with operator-sdk build)
      build:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/casskop
          - setup_remote_docker # Creates a separate environment for each build for security.
          - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
              keys: # Use checksum of go.sum to version cache.
                - << parameters.operatorName >>-build-{{ .Branch }}-{{ checksum "go.sum" }}
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          - run:
              name: Build Operator
              command: make build
          - persist_to_workspace: # Create artifacts
              root: /home/circleci
              paths:
                - << parameters.operatorDir >>/build/_output
                - << parameters.operatorDir >>/vendor
          - deploy:
              name: Push image to Docker Hub
              command: |
                if [[ $(echo "$CIRCLE_BRANCH" | grep -c "pull") -gt 0 ]]; then
                  echo "This is a PR, we don't push to Hub."
                else
                  docker login --username $DOCKERHUB_USER --password $DOCKERHUB_PASSWORD
                  make push
                fi
          - save_cache:
              name: Save build artifacts in cache
              key: << parameters.operatorName >>-build-{{ .Branch }}-{{ checksum "go.sum" }}
              paths:
                - build/_output
                - vendor

      # Unit test job, will execute makefile 'unit-test-with-vendor' step
      unit-test:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/casskop
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          # Unit tests steps
          - run:
              name: Unit Tests
              command: make unit-test-with-vendor
          # Artifacts definitions
          - store_artifacts: # Store unit test coverage reports
              path: coverage.html
          - persist_to_workspace:
              root: /home/circleci
              paths:
                - << parameters.operatorDir >>/coverage.out
                - << parameters.operatorDir >>/test-report.out

      # Dgoss tests job, will execute make 'dgoss-bootstrap'
      docker-dgoss-test:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/casskop
          - setup_remote_docker
          - attach_workspace: # Attach artifact from workdir
              at: /home/circleci
          # Dgoss tests steps
          - run: # Run test wich enable to validate bootstrap image.
              name: Dgoss tests
              command: |
                curl -L https://raw.githubusercontent.com/aelsabbahy/goss/master/extras/dgoss/dgoss -o /usr/local/bin/dgoss
                chmod +rx /usr/local/bin/dgoss
                curl -L https://github.com/aelsabbahy/goss/releases/download/v0.3.6/goss-linux-amd64 -o /usr/local/bin/goss
                chmod +rx /usr/local/bin/goss
                export GOSS_PATH=/usr/local/bin/goss
                export GOSS_FILES_STRATEGY=cp
                make dgoss-bootstrap

      # Reporting step, will run sonar report from scan.
      report:
        <<: *params_operator
        <<: *job_operator
        steps:
          - checkout:
              path: /home/circleci/casskop
          - attach_workspace:
              at: /home/circleci
          - restore_cache: # If exist, restore dependencies libs download cache, from previous pipeline execution.
              name: Restore SonarQube Scanner
              keys:
                - sonar-scanner-3.3.0.1492-linux
          # Sonar steps
          - run:
              name: Download SonarQube Scanner
              command: |
                chmod +x /home/circleci/casskop/.circleci/install_sonar-scanner.sh
                /home/circleci/casskop/.circleci/install_sonar-scanner.sh
          - save_cache: # Cache sonar download
              name: Cache SonarQube Scanner
              key: sonar-scanner-3.3.0.1492-linux
              paths:
                - sonar-scanner-3.3.0.1492-linux
                - /home/circleci/<< parameters.operatorDir >>/.sonar
          - run: # Run sonar scan
              name: Sonarcloud Scan
              command: |
                ./sonar-scanner-3.3.0.1492-linux/bin/sonar-scanner -X \
                -Dsonar.projectName=<< parameters.operatorName >> \
                -Dsonar.projectKey=${SONAR_PROJECT} \
                -Dsonar.login=${SONAR_TOKEN} \
                -Dsonar.branch.name=${CIRCLE_BRANCH} \
                -Dsonar.organization=${SONAR_ORGANISATION} \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.projectBaseDir=/home/circleci/<< parameters.operatorDir >> \
                -Dsonar.sources=. \
                -Dsonar.sources.inclusions="**/**.go" \
                -Dsonar.exclusions="**/*_test.go,**/vendor/**,**/sonar-scanner-3.3.0.1492-linux/**,**docs/**" \
                -Dsonar.coverage.exclusions="**/vendor/**,**/test/**,**docs/**" \
                -Dsonar.tests=. \
                -Dsonar.language=go \
                -Dsonar.sourceEncoding=UTF-8 \
                -Dsonar.test.inclusions="**/**_test.go" \
                -Dsonar.test.exclusions="**/vendor/**" \
                -Dsonar.go.coverage.reportPaths=coverage.out \
                -Dsonar.go.tests.reportPaths=test-report.out \
                -Dsonar.coverage.dtdVerification=false \
                -Dsonar.log.level=INFO
                cat -n .scannerwork/report-task.txt
          # Artifacts definitions
          - store_test_results: # Store sonar scan reports
              path: reports

      publish-helm:
        <<: *params_operator
        working_directory: /home/circleci/<< parameters.operatorDir >>
        docker:
          - image: google/cloud-sdk
        steps:
          - checkout:
              path: /home/circleci/casskop
          - run:
              name: publish-helm
              command: |
                if [[ $(echo "$CIRCLE_BRANCH" | grep -c "pull") -gt 0 ]]; then
                  echo "This is a PR, we don't publish to helm repo."
                else
                  GCP_SA_CREDS=${GCP_POC_RTC_SA_KEY} /home/circleci/casskop/tools/publish_helm_gcs.sh
                fi
jobs:
  deploy-website:
    working_directory: /home/circleci/casskop/website
    docker: # run the steps with Docker
      - image: node:14.13.1
    steps:
      - checkout:
          path: /home/circleci/casskop
      #      - restore_cache:
      #          name: Restore yarn Scanner
      #          keys:
      #            - root-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
      #            # Fallback in case checksum fails
      #            - root-yarn-{{ .Branch }}-
      #      - run:
      #          name: root-yarn
      #          command: |
      #              yarn install --non-interactive --cache-folder ~/.cache/yarn
      #      - save_cache:
      #          name: Save yarn cache
      #          paths:
      #            - node_modules
      #            - ~/.cache/yarn
      #          key: root-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: deploy
          command: |
            echo $(pwd)
            ls -la
            git config --global user.name "${GH_NAME}"
            git config --global user.email "${GH_EMAIL}"
            echo "machine github.com login ${GH_NAME} password ${GH_TOKEN}" > ~/.netrc
            yarn install
            yarn build
            GIT_USER="${GH_NAME}" yarn deploy

# Anchors
## Filters anchors
.everytime_filter: &everytime_filter
  filters:
    tags:
      only: /.*/

.canonical_repo_filter: &canonical_repo_filter
  filters:
    tags:
      only: /.*/
    branches:
      # report sonar only from canonical repository
      only: /^(?!pull\/).*$/ # https://stackoverflow.com/a/5334825/358804

.ignore_fork_pr_filter: &ignore_fork_pr_filter
  filters:
    tags:
      only: /.*/
    branches:
      # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
      ignore: /pull\/[0-9]+/

.only_on_release_tag: &only_on_release_tag
  filters:
    # ignore any commit on any branch by default
    branches:
      ignore: /.*/
    # only act on version tags
    tags:
      only: /v[0-9]+(\.[0-9]+)*-release/

.website_publish: &website_publish
  filters:
    # ignore any commit on any branch by default
    branches:
      only:
        - master

## Parameters anchors
.params_multicasskop: &params_multicasskop
  operatorDir: casskop/multi-casskop
  operatorName: MultiCassKop

# Workflow definition
workflows:
  version: 2
  ## CassKop operator workflow.
  ci-casskop-operator:
    jobs:
      - operator/generate:
          name: generate-casskop
          <<: *everytime_filter

      - operator/unit-test:
          name: unit-test-casskop
          requires:
            - generate-casskop
          <<: *everytime_filter

      - operator/build:
          name: build-casskop
          requires:
            - unit-test-casskop
          <<: *everytime_filter

      - operator/docker-dgoss-test:
          name: docker-dgoss-test-casskop
          requires:
            - build-casskop
          <<: *everytime_filter

      - operator/report:
          name: report-casskop
          requires:
            - unit-test-casskop
          <<: *canonical_repo_filter

      - k3d/e2e-orb:
          name: e2e-test RollingRestart
          test_name: RollingRestart
          requires:
            - build-casskop
          <<: *ignore_fork_pr_filter

      - k3d/e2e-orb:
          name: e2e-test ScaleUp
          test_name: ClusterScaleUp
          requires:
            - build-casskop
          <<: *ignore_fork_pr_filter

      - k3d/e2e-orb:
          name: e2e-test ScaleDown
          test_name: ClusterScaleDown
          requires:
            - build-casskop
          <<: *ignore_fork_pr_filter

      - k3d/e2e-orb:
          name: e2e-test ScaleDownSimple
          test_name: ClusterScaleDownSimple
          requires:
            - build-casskop
          <<: *ignore_fork_pr_filter

      - k3d/e2e-orb:
          name: e2e-test CreateOneClusterService
          test_name: CreateOneClusterService
          requires:
            - build-casskop
          <<: *ignore_fork_pr_filter

      - k3d/e2e-orb:
          name: e2e-test UpdateConfigMap
          test_name: UpdateConfigMap
          requires:
            - build-casskop
          <<: *ignore_fork_pr_filter

      - k3d/e2e-orb:
          name: e2e-test ExecuteCleanup
          test_name: ExecuteCleanup
          requires:
            - build-casskop
          <<: *ignore_fork_pr_filter

      - k3d/e2e-orb:
          name: kuttl-test ScaleUpAndDown
          test_name: ScaleUpAndDown # Has be be the same as the TestCase (folder) in Kuttl directory
          test_type: kuttl
          requires:
            - build-casskop
          <<: *ignore_fork_pr_filter

      - operator/publish-helm:
          name: publish-helm-orange-incubator-casskop
          requires:
            - report-casskop
          <<: *only_on_release_tag

      - deploy-website:
          name: deploy-website
          requires:
            - report-casskop
          <<: *website_publish

  # MultiCassKop operator workflow.
  ci-multicasskop-operator:
    jobs:
      - operator/generate:
          name: generate-casskop
          <<: *everytime_filter

      - operator/generate:
          name: generate-multicasskop
          <<: *params_multicasskop
          requires:
            - generate-casskop
          <<: *everytime_filter

      - operator/build:
          name: build-multicasskop
          <<: *params_multicasskop
          requires:
            - generate-multicasskop
          <<: *everytime_filter

      - operator/report:
          name: report-multicasskop
          <<: *params_multicasskop
          requires:
            - build-multicasskop
          <<: *canonical_repo_filter

      - operator/publish-helm:
          name: publish-helm-orange-incubator-multicasskop
          <<: *params_multicasskop
          requires:
            - report-multicasskop
          <<: *only_on_release_tag

